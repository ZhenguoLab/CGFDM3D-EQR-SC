# ================================================================
#   ESS, Southern University of Science and Technology
#
#   File Name: plot_waveform.py
#   Author: Tianhong Xu, 12231218@mail.sustech.edu.cn
#   Created Time: 2023-11-16
#   Discription: Plot the comparion of waveforms generated by different schemes
#
#   Reference:
#      1. Wang, W., Zhang, Z., Zhang, W., Yu, H., Liu, Q., Zhang, W., & Chen, X. (2022). CGFDM3D‚ÄêEQR: A platform for rapid response to earthquake disasters in 3D complex media. Seismological Research Letters, 93(4), 2320-2334. https://doi.org/https://doi.org/10.1785/0220210172
#      2. Xu, T., & Zhang, Z. (2024). Numerical simulation of 3D seismic wave based on alternative flux finite-difference WENO scheme. Geophysical Journal International, 238(1), 496-512. https://doi.org/https://doi.org/10.1093/gji/ggae167
#
# ================================================================

import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as inte
from matplotlib import rcParams
import json
from scipy import signal

params = json.load(open("params.json"))

dt = params["DT"]
t = np.arange(0, params["TMAX"] - 2 * dt, dt)
print(t.shape)

config = {"font.size": 12}
rcParams.update(config)
plt.figure(figsize=(18, 12))
plt.subplots_adjust(wspace=0.08)

station = json.load(open("station.json"))
station_keys = station["station(point)"].keys()
station_num = len(station["station(point)"])

# print("station_num = %d" % station_num)


idiswid = 0
for key in station_keys:

    # Read the data: AWENO
    AWENO_receiver_v_x = np.loadtxt(
        "./data/SCFDM/Vx_" + str(key) + ".txt")
    AWENO_receiver_v_y = np.loadtxt(
        "./data/SCFDM/Vy_" + str(key) + ".txt")
    AWENO_receiver_v_z = np.loadtxt(
        "./data/SCFDM/Vz_" + str(key) + ".txt")

    # Read the data: CGFDM
    CGFDM_receiver_v_x = np.loadtxt(
        "./data/CGFDM/Vx_" + str(key) + ".txt")
    CGFDM_receiver_v_y = np.loadtxt(
        "./data/CGFDM/Vy_" + str(key) + ".txt")
    CGFDM_receiver_v_z = np.loadtxt(
        "./data/CGFDM/Vz_" + str(key) + ".txt")

    # # Displacement
    # AWENO_receiver_v_x = inte.cumtrapz(AWENO_receiver_v_x, t, initial=0)
    # AWENO_receiver_v_y = inte.cumtrapz(AWENO_receiver_v_y, t, initial=0)
    # AWENO_receiver_v_z = inte.cumtrapz(AWENO_receiver_v_z, t, initial=0)

    # CGFDM_receiver_v_x = inte.cumtrapz(CGFDM_receiver_v_x, t, initial=0)
    # CGFDM_receiver_v_y = inte.cumtrapz(CGFDM_receiver_v_y, t, initial=0)
    # CGFDM_receiver_v_z = inte.cumtrapz(CGFDM_receiver_v_z, t, initial=0)

    # Normalize
    # AWENO_max_value = max(max(abs(AWENO_receiver_v_x)), max(
    #     abs(AWENO_receiver_v_y)), max(abs(AWENO_receiver_v_z)))
    # CGFDM_max_value = max(max(abs(CGFDM_receiver_v_x)), max(
    #     abs(CGFDM_receiver_v_y)), max(abs(CGFDM_receiver_v_z)))
    AWENO_max_value = 5e-10
    CGFDM_max_value = 5e-10

    disWid = 2

    plt.subplot(1, 3, 1)
    v_x_CGFDM = plt.plot(t, CGFDM_receiver_v_x /
                         CGFDM_max_value + idiswid*disWid, "b-")
    v_x_AWENO = plt.plot(t, AWENO_receiver_v_x /
                         AWENO_max_value + idiswid*disWid, "r--")
    plt.legend(['CGFDM', 'AWENO'], loc='upper center',
               bbox_to_anchor=(0.145, 1.007), ncol=1)
    plt.ylim(-1.5, -1.5 + 2 * station_num + 1)
    # plt.xlim([0, 100])
    # plt.xlim([0, params["TMAX"]])
    # plt.yticks(np.arange(0, 2 * station_num, 2), np.arange(
    #     0, station_num, 1), fontsize=12)
    plt.yticks(np.arange(0, 2 * station_num, 2), station_keys, fontsize=12)
    plt.xlabel('time(s)')
    plt.title('v_x')
    plt.ylabel("Normalized Amplitude")

    plt.subplot(1, 3, 2)
    v_y_CGFDM = plt.plot(t, CGFDM_receiver_v_y /
                         CGFDM_max_value + idiswid*disWid, "b-")
    v_y_AWENO = plt.plot(t, AWENO_receiver_v_y /
                         AWENO_max_value + idiswid*disWid, "r--")
    plt.ylim(-1.5, -1.5 + 2 * station_num + 1)
    # plt.xlim([0, 100])
    # plt.xlim([0, params["TMAX"]])
    plt.yticks([])
    plt.xlabel('time(s)')
    plt.title('v_y')

    plt.subplot(1, 3, 3)
    v_z_CGFDM = plt.plot(t, CGFDM_receiver_v_z /
                         CGFDM_max_value + idiswid*disWid, "b-")
    v_z_AWENO = plt.plot(t, AWENO_receiver_v_z /
                         AWENO_max_value + idiswid*disWid, "r--")
    plt.ylim(-1.5, -1.5 + 2 * station_num + 1)
    # plt.xlim([0, 100])
    # plt.xlim([0, params["TMAX"]])
    plt.yticks([])
    plt.xlabel('time(s)')
    plt.title('v_z')

    idiswid += 1

plt.savefig("./png/Waveform_compare.png", dpi=300)
